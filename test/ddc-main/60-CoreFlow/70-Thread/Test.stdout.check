ok


-- Check world threading works into loop and guard combaintors.
-- This is before the wind-transform that eliminates these combinators.
module Test with
letrec {
  filter : [p : Proc].[k0 : Rate].[a : Data].(a -> Bool#) -> (a -> Bool#) -> Series# p k0 a -> World# -> Tuple2# World# (Vector# a)
    = /\(p : Proc)./\(k0 : Rate)./\(a : Data).
       \(f g : a -> Bool#).\(s0 : Series# p k0 a).\(^ : World#).
      letcase T2# (^ : World#) (k1__count : Ref# Nat#)  = new# [Nat#] 0# ^0 in
      letcase T2# (^ : World#) (k2__count : Ref# Nat#)  = new# [Nat#] 0# ^0 in
      letcase T2# (^ : World#) (x4 : Vector# a) 
        = vnewN# [a] [k0] (rateOfSeries# [p] [k0] [a] s0) ^0 in
      let x4$buf : Buffer# a = vbuf# [a] x4 in
      letcase T1# (^ : World#) 
        = loopn# [k0] (rateOfSeries# [p] [k0] [a] s0)
              (\(x0 : Nat#).\(^ : World#).
               letcase T2# (^ : World#) (s0__elem : a)  = next# [a] [p] [k0] s0 x0 ^0 in
               let x1__elem : Bool#
                     = (\(x : a). f x) s0__elem in
               letcase T1# (^ : World#) 
                 = guard# k1__count x1__elem
                       (\(x1 : Nat#).\(^ : World#).
                        let x3__elem : Bool#
                              = (\(x : a). g x) s0__elem in
                        letcase T1# (^ : World#) 
                          = guard# k2__count x3__elem
                                (\(x2 : Nat#).\(^ : World#).
                                 letcase T1# (^ : World#)  = vwrite# [a] x4$buf x2 s0__elem ^0 in
                                 ^0) ^0 in
                        ^0) ^0 in
               ^0) ^0 in
      T2# [World#] [Vector# a] ^0 x4
}


-- Check world threading works after the wind tranform.
-- Where we have explicit tail-recursive loops.
module Test with
letrec {
  map_map : [p : Proc].[k : Rate].Series# p k Int# -> World# -> Tuple2# World# (Vector# Int#)
    = /\(p : Proc)./\(k : Rate).
       \(s_aub : Series# p k Int#).\(^ : World#).
      letcase T2# (^ : World#) (x6 : Vector# Int#) 
        = vnewN# [Int#] [k] (rateOfSeries# [p] [k] [Int#] s_aub) ^0 in
      let x6$buf : Buffer# Int# = vbuf# [Int#] x6 in
      letrec {
        loop_k : Nat# -> World# -> World#
          = \(x0 : Nat#).\(^ : World#).
            case x0 of {
              0#  
               -> ^0;
              _ 
               -> letcase T2# (^ : World#) (s_aub__elem : Int#)  = next# [Int#] [p] [k] s_aub x0 ^0 in
                  let x2__elem : Int# = add# [Int#] s_aub__elem 1i# in
                  let x4__elem : Int# = mul# [Int#] x2__elem 2i# in
                  letcase T1# (^ : World#)  = vwrite# [Int#] x6$buf x0 x4__elem ^0 in
                  loop_k (add# [Nat#] x0 1#) ^0
            }
      } in
      letcase T1# (^ : World#) 
        = loop_k
              (natOfRateNat# [k] (rateOfSeries# [p] [k] [Int#] s_aub)) ^0 in
      T2# [World#] [Vector# Int#] ^0 x6
}


-- Double fold fusion
module Test with
letrec {
  lower_ffold_rqB : [p : Proc].[k_c : Rate].Series# p k_c Int# -> World# -> Tuple2# World# Int#
    = /\(p : Proc)./\(k_c : Rate).
       \(s_au5 : Series# p k_c Int#).\(^ : World#).
      let x3__acc_0 : Int# = 0i# in
      let x8__acc_0 : Int# = 1i# in
      let k_c_length : Nat#
            = natOfRateNat# [k_c] (rateOfSeries# [p] [k_c] [Int#] s_au5) in
      letrec {
        loop_k_c : Nat# -> Int# -> Int# -> World# -> Tuple3# World# Int# Int#
          = \(x1 : Nat#).\(x3__acc_1 x8__acc_1 : Int#).\(^ : World#).
            case sub# [Nat#] k_c_length x1 of {
              0#  
               -> T3# [World#] [Int#] [Int#] ^0 x3__acc_1 x8__acc_1;
              _ 
               -> letcase T2# (^ : World#) (s_au5__elem : Int#)  = next# [Int#] [p] [k_c] s_au5 x1 ^0 in
                  let x0 : Int# = x3__acc_1 in
                  let x3__acc_2 : Int# = add# [Int#] x0 s_au5__elem in
                  let x5 : Int# = x8__acc_1 in
                  let x8__acc_2 : Int# = mul# [Int#] x5 s_au5__elem in
                  loop_k_c (add# [Nat#] x1 1#) x3__acc_2 x8__acc_2 ^0
            }
      } in
      letcase T3# (^ : World#) (x3__acc_2 : Int#) (x8__acc_2 : Int#)  = loop_k_c 0# x3__acc_0 x8__acc_0 ^0 in
      let x3 : Int# = x3__acc_2 in
      let x8 : Int# = x8__acc_2 in
      let x10 : Int# = add# [Int#] x3 x8 in
      T2# [World#] [Int#] ^0 x10
}


