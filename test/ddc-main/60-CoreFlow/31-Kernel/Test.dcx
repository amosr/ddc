-- Lowering to produce vectorised kernels.
:set Synth
:set SuppressLetTypes


-- Multiply two series.
:flow-lower-kernel..
module Test with letrec
test    [p : Proc] [k : Rate] (n  : RateNat# k)
        (v  : Vector# Float32#)
        (s1 : Series# p k Float32#) (s2 : Series# p k Float32#) 
        : Process# p k
 = do   sfill# v (smap2# mul# s1 s2)
;;


-- Multiply by constant, lifting replicates constant.
:flow-lower-kernel..
module Test with letrec
test    [p : Proc] [k : Rate] (n : RateNat# k)
        (v  : Vector# Float32#)
        (s1 : Series# p k Float32#) (s2 : Series# p k Float32#) 
        : Process# p k
 = do   s2      = smap2# mul# s1 s2
        s3      = smap# (add# 2.0f32#) s2
        sfill# v s3
;;


-- Gather from vector.
:flow-lower-kernel..
module Test with letrec
test    [p : Proc] [k k2 : Rate] (n : RateNat# k)
        (v1 : RateVec# k2 Float32#)   (v2 : Vector# Float32#)
        (s1 : Series# p k Nat#)
        : Process# p k
 = do   s2      = sgather# v1 s1
        s3      = smap# (add# 2.0f32#) s2
        sfill# v2 s3
;;


-- Scatter into vector.
:flow-lower-kernel..
module Test with letrec
test    [p : Proc] [k : Rate] (n : RateNat# k)
        (v1 : Vector# Float32#)
        (s1 : Series# p k Nat#)   (s2 : Series# p k Float32#)
        : Process# p k
 = do   s3      = smap# (add# 2.0f32#) s2
        sscatter# v1 s1 s3
;;


-- Sum the elements of a vector.
:flow-lower-kernel..
module Test with letrec
test    [p : Proc] [k : Rate] (n : RateNat# k)
        (x1 : Ref# Float32#) (s1 : Series# p k Float32#)
        : Process# p k
 =      sreduce# x1 add# 0.0f32# s1
;;


-- Fuse gather, map and reduce in one.
:flow-lower-kernel..
module Test with letrec
test    [p : Proc] [k k2 : Rate] (n : RateNat# k) 
        (x1 : Ref# Float32#) (v1 : RateVec# k2 Float32#)
        (s1 : Series# p k Nat#)
        : Process# p k
 = do   
        s2      = sgather# v1 s1
        s3      = smap# (mul# 2.0f32#) s2
        sreduce# x1 add# 0.0f32# s3
;;


-- Dot product.
:flow-lower-kernel..
module Test with letrec
test    [p : Proc] [k  : Rate] (n : RateNat# k) 
        (x1 : Ref# Float32#)
        (s1 : Series# p k Float32#) (s2 : Series# p k Float32#)
        : Process# p k
 = do   
        s3      = smap2# mul# s1 s2
        sreduce# x1 add# 0.0f32# s3
;;


-- Fuse sum and product.
:flow-lower-kernel..
module Test with letrec
test    [p : Proc] [k  : Rate] (n : RateNat# k) 
        (x1 : Ref# Float32#)      (x2 : Ref# Float32#)
        (s1 : Series# p k Float32#)
        : Process# p k
 = do
        pjoin#  (sreduce# x1 add# 0.0f32# s1)
                (sreduce# x2 mul# 1.0f32# s1)
;;


-- Fuse sum and dot product.
:flow-lower-kernel..
module Test with letrec
test    [p : Proc] [k  : Rate] (n : RateNat# k) 
        (x1 : Ref# Float32#)      (x2 : Ref# Float32#)
        (s1 : Series# p k Float32#) (s2 : Series# p k Float32#)
        : Process# p k
 = do   s3      = smap2# mul# s1 s2
        pjoin#  (sreduce# x1 add# 0.0f32# s3)
                (sreduce# x2 add# 0.0f32# s1)
;;

