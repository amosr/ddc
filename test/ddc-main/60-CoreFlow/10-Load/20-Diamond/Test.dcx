:set lang Flow
:set Synth
:set PrettyUseLetCase


-- Kernel of QuickHull algorithm.
-- This has a diamond dependency on the points stream,
--  which is something that generic stream fusion can't fuse.
:load..
module Test with letrec

-- Get the maximum of two floats.
max     (n1 : Float64#) (n2 : Float64#) : Float64#
 = case gt# n1 n2 of
        True#   -> n1
        False#  -> n2


-- Compute the determinate between a line and a point vector.
det     (l1 : Tuple2# Float64# Float64#)
        (l2 : Tuple2# Float64# Float64#)
        (p0 : Tuple2# Float64# Float64#) 
        : Float64#
 = case p0 of { T2# x0 y0 -> 
   case l1 of { T2# x1 y1 -> 
   case l2 of { T2# x2 y2 -> 
        sub# (mul# (sub# x1 x0) (sub# y2 y0))
             (mul# (sub# y1 y0) (sub# x2 x0)) }}}


-- Select points that are above the given line,
--  and also return the maximum determinate.
split   [p       : Proc]
        [k1      : Rate]
        (l1      : Tuple2# Float64# Float64#)
        (l2      : Tuple2# Float64# Float64#)
        (points  : Series# p k1 (Tuple2# Float64# Float64#))
        (vec     : Vector# (Tuple2# Float64# Float64#))
        (mx      : Ref# Float64#)
        : Process# p k1
 = do
        -- Take the determinate between the line and each point.
        dets    = smap# (det l1 l2) points

        -- We only want points where the determinate is more than zero.
        flags   = smap# (gt# (promote# 0#)) dets

        pjoin#  -- Filter the points, keeping those where the determinate was more
                -- than zero.
                (smkSel1# flags 
                 (/\(k2 : Rate). \(sel : Sel1# p k1 k2).
                  let above   = spack# sel points 
                  in  presize# (rsel1# sel rid#)
                        (sfill# vec above)))

                -- Also compute the maximum determinate.
                (sreduce# mx max (promote# 0#) dets)
;;
