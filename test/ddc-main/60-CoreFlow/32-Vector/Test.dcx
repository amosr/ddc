-- Lowering to produce complete vector programs. 
:set Synth
:set SuppressLetTypes


:flow-lower-vector..
module Test with letrec
test    [p : Proc] [k  : Rate] (n  : RateNat# k)
        (x1 : Ref# Float32#)
        (v1 : RateVec# k Float32#) (v2 : RateVec# k Float32#)
        : Process# p k
 = do   
        s1      = series# v1
        s2      = series# v2
        s3      = smap2# mul# s1 s2
        sreduce# x1 add# 0.0f32# s3
;;


:flow-lower-vector..
module Flow with letrec
eatPoints 
        [p : Proc] [k : Rate]
        (ox oy  : Float32#)
        (v0     : Vector# Float32#) (r0 : Ref# Float32#)
        (dsr    : RateNat# k) 
        (v1 v2  : RateVec# k Float32#)
        : Process# p k
 = do   s1    = series# v1
        s2    = series# v2
        s     = smap2#  (\(x y : Float32#).
                         add#   (mul# (sub# x ox) (sub# x ox))
                                (mul# (sub# y oy) (sub# y oy))) 
                        s1 s2

        pjoin#  (sfill#   v0 s)
                (sreduce# r0 add# 0.0f32# s)
;;
