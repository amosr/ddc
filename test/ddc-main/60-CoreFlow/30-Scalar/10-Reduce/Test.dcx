:set Synth
:set SuppressLetTypes


-- Single reduction of input series.
:flow-lower..
module Test with letrec
fold    [p : Proc] [k : Rate] 
        (x : Ref# Int#)
        (v : RateVec# k Int#)
           : Process# p k
 = let s = series# v
   in  sreduce# x add# 0i# s
;;


-- Two reductions over the same input series.
:flow-lower..
module Test with letrec
ffold   [p : Proc] [k : Rate]
        (x1 x2 : Ref# Int#)
        (v : RateVec# k Int#)
           : Process# p k
 = let s = series# v
   in  pjoin# (sreduce# x1 add# 0i# s)
              (sreduce# x2 mul# 1i# s)
;;


-- Three reductions over the same input series
:flow-lower..
module Test with letrec
fffold  [p : Proc] [k : Rate]
        (x1 x2 x3 : Ref# Int#)
        (v : RateVec# k Int#) : Process# p k
 = let s = series# v
   in  pjoin# (sreduce# x1 add# 0i# s)
     ( pjoin# (sreduce# x2 mul# 1i# s)
              (sreduce# x3 mul# 1i# s))
;;

