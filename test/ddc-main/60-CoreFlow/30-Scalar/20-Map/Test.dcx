:set Synth
:set SuppressLetTypes


-- Fuse map into fill.
:flow-lower..
module Test with letrec
map     [p : Proc] [k : Rate] (v : Vector# Int#)
        (s : Series# p k k Int#) : Process# p k
 = sfill# v (smap# (\x. add# (mul# x 2i#) 1i#) s)
;;


-- Fuse map into fold.
:flow-lower..
module Test with letrec
foldMap [p : Proc] [k : Rate] (x : Ref# Int#)
        (s : Series# p k k Int#) : Process# p k
 = sreduce# x 
        add# 0i#
        (smap# (\x. mul# x 2i#) s)
;;


-- Map/Map fusion, filling a vector.
:flow-lower..
module Test with letrec
map     [p : Proc] [k : Rate] (v : Vector# Int#)
        (s : Series# p k k Int#) : Process# p k
 = sfill# v
        (smap# (mul# 2i#)
               (smap1# (add# 1i#) 
                       s))
;;


-- Map and Reduce the same series.
:flow-lower..
module Test with letrec
foldMap [p : Proc] [k : Rate] (v : Vector# Int#) (x : Ref# Int#)
        (s : Series# p k k Int#) : Process# p k
 = do   s2      = smap# (mul# 2i#) s
        s3      = smap# (add# 1i#) s2
        pjoin#  (sreduce# x add# 0i# s)
                (sfill#   v s3)
;;
