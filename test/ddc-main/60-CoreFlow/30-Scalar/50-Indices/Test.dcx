:set lang Flow
:set Synth
:set SuppressLetTypes


-- Fill a vector with segment indices.
:flow-lower..
module Test with letrec
test    [p : Proc] [k1 : Rate]
        (lens : Series# p k1 k1 Nat#)
        (v    : Vector# Nat#)
        : Process# p k1
 = smkSegd# lens
   (/\(k2 : Rate). \(segd : Segd# k1 k2). 
    do  s2 = sindices# segd 
        sfill# v s2)
;;


-- Fuse reps with indices.
:flow-lower..
module Test with letrec
test    [p : Proc] [k1 : Rate]
        (lens : Series# p k1 k1 Nat#) (things : Series# p k1 k1 Nat#)
        (v    : Vector# Nat#)
        : Process# p k1
 = smkSegd# lens
   (/\(k2 : Rate). \(segd : Segd# k1 k2). 
    do  s2     = sindices# segd
        s3     = sreps# segd things
        s4     = smap2# add# s2 s3
        sfill# v s4)
;;


-- Gather chunks of some shared things vector.
-- We write ranges of the things vector to the first output, 
-- and copies of the first elemenet of the range to the second output.
-- The copies are replicated separately so the first element of the range
-- does not get read for each of the inner iterations.
:flow-lower..
module Test with letrec
test    [p : Proc] [k1 kThings : Rate]
        (lens      : RateVec# k1 Nat#)           (base      : RateVec# k1 Nat#)
        (things    : RateVec# kThings  Float32#) (out1 out2 : Vector# Float32#)
        : Process# p k1
 = do   lens' = series# lens
        base' = series# base
        smkSegd# lens'
            (/\(k2 : Rate). \(segd : Segd# k1 k2). 
            do  bases   = sreps#    segd base'
                offsets = sindices# segd
                ixs     = smap2#    add# bases offsets
                results = sgather#  things ixs
                firsts  = sgather#  things base'
                firstsr = sreps#    segd firsts 
                pjoin#  (sfill# out1 results)
                        (sfill# out2 firstsr))
;;
